; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG89964 DB	'WM_DESTROY', 0aH, 00H
	ORG $+4
$SG89966 DB	'WM_CLOSE', 0aH, 00H
	ORG $+6
$SG89968 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG89995 DB	'handmadeHeroWindowClass', 00H
$SG89998 DB	'Handmade Hero', 00H
CONST	ENDS
PUBLIC	WinMain
PUBLIC	?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?Running@@3_NA DB 01H DUP (?)				; Running
	ALIGN	4

?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A DB 048H DUP (?) ; GlobalBackBuffer
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+628
	DD	imagerel $unwind$WinMain
$pdata$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z
$pdata$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z DD imagerel ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z+252
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z+269
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z
$pdata$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z DD imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z
	DD	imagerel ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z+158
	DD	imagerel $unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+484
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 041d01H
	DD	037011dH
	DD	060157016H
$unwind$?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	04212H
$unwind$?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z DD 011201H
	DD	06212H
$unwind$?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z DD 011701H
	DD	0e217H
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 042e19H
	DD	027011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 64
Height$1 = 68
Width$2 = 72
Y$3 = 76
X$4 = 80
Dimension$5 = 88
Result$ = 96
$T6 = 104
DeviceContext$7 = 112
$T8 = 128
Paint$9 = 208
__$ArrayPad$ = 288
Window$ = 336
Message$ = 344
WParam$ = 352
LParam$ = 360
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 119  : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 120  : 	LRESULT Result = 0;

  0002e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 121  : 
; 122  : 	switch (Message)

  00037	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003e	89 44 24 40	 mov	 DWORD PTR tv64[rsp], eax
  00042	83 7c 24 40 02	 cmp	 DWORD PTR tv64[rsp], 2
  00047	74 26		 je	 SHORT $LN5@Win32MainW
  00049	83 7c 24 40 05	 cmp	 DWORD PTR tv64[rsp], 5
  0004e	74 1a		 je	 SHORT $LN4@Win32MainW
  00050	83 7c 24 40 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00055	74 5c		 je	 SHORT $LN8@Win32MainW
  00057	83 7c 24 40 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005c	74 2a		 je	 SHORT $LN6@Win32MainW
  0005e	83 7c 24 40 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00063	74 3c		 je	 SHORT $LN7@Win32MainW
  00065	e9 31 01 00 00	 jmp	 $LN9@Win32MainW
$LN4@Win32MainW:

; 123  : 	{
; 124  : 	case WM_SIZE:
; 125  : 	{
; 126  : 
; 127  : 	}
; 128  : 	break;

  0006a	e9 56 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 129  : 
; 130  : 	case WM_DESTROY:
; 131  : 	{
; 132  : 		//handle as error, recreate window
; 133  : 		Running = false;

  0006f	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 134  : 		OutputDebugStringA("WM_DESTROY\n");

  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89964
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 135  : 	}
; 136  : 	break;

  00083	e9 3d 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 137  : 
; 138  : 	case WM_CLOSE:
; 139  : 	{
; 140  : 		//todo: handle with message to user
; 141  : 		Running = false;

  00088	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 142  : 		OutputDebugStringA("WM_CLOSE\n");

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89966
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 143  : 	}
; 144  : 	break;

  0009c	e9 24 01 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 145  : 
; 146  : 	case WM_ACTIVATEAPP:
; 147  : 	{
; 148  : 		OutputDebugStringA("WM_ACTIVATEAPP\n");

  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89968
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 149  : 	}
; 150  : 	break;

  000ae	e9 12 01 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 151  : 
; 152  : 	case WM_PAINT:
; 153  : 	{
; 154  : 		PAINTSTRUCT Paint;
; 155  : 		HDC DeviceContext = BeginPaint(Window, &Paint);

  000b3	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  000bb	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  000c9	48 89 44 24 70	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 156  : 		int X = Paint.rcPaint.left;

  000ce	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000d5	89 44 24 50	 mov	 DWORD PTR X$4[rsp], eax

; 157  : 		int Y = Paint.rcPaint.top;

  000d9	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  000e0	89 44 24 4c	 mov	 DWORD PTR Y$3[rsp], eax

; 158  : 		int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  000e4	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+12]
  000eb	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+20]
  000f2	2b c8		 sub	 ecx, eax
  000f4	8b c1		 mov	 eax, ecx
  000f6	89 44 24 48	 mov	 DWORD PTR Width$2[rsp], eax

; 159  : 		int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  000fa	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR Paint$9[rsp+16]
  00101	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR Paint$9[rsp+24]
  00108	2b c8		 sub	 ecx, eax
  0010a	8b c1		 mov	 eax, ecx
  0010c	89 44 24 44	 mov	 DWORD PTR Height$1[rsp], eax

; 160  : 		win32_window_dimension Dimension=Win32GetWindowDimension(Window);

  00110	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00118	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  0011d	48 89 44 24 68	 mov	 QWORD PTR $T6[rsp], rax
  00122	48 8b 44 24 68	 mov	 rax, QWORD PTR $T6[rsp]
  00127	48 89 44 24 58	 mov	 QWORD PTR Dimension$5[rsp], rax

; 161  : 		Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, GlobalBackBuffer, X, Y, Width, Height);

  0012c	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  0013b	48 8b f8	 mov	 rdi, rax
  0013e	48 8b f1	 mov	 rsi, rcx
  00141	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00146	f3 a4		 rep movsb
  00148	8b 44 24 44	 mov	 eax, DWORD PTR Height$1[rsp]
  0014c	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00150	8b 44 24 48	 mov	 eax, DWORD PTR Width$2[rsp]
  00154	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00158	8b 44 24 4c	 mov	 eax, DWORD PTR Y$3[rsp]
  0015c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00160	8b 44 24 50	 mov	 eax, DWORD PTR X$4[rsp]
  00164	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00168	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR $T8[rsp]
  00170	44 8b 44 24 5c	 mov	 r8d, DWORD PTR Dimension$5[rsp+4]
  00175	8b 54 24 58	 mov	 edx, DWORD PTR Dimension$5[rsp]
  00179	48 8b 4c 24 70	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  0017e	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 162  : 		EndPaint(Window, &Paint);

  00183	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR Paint$9[rsp]
  0018b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 163  : 	}
; 164  : 	break;

  00199	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN9@Win32MainW:

; 165  : 
; 166  : 	default:
; 167  : 	{
; 168  : 
; 169  : 		//OutputDebugStringA("DEFAULT\n");
; 170  : 		Result = DefWindowProc(Window, Message, WParam, LParam);

  0019b	4c 8b 8c 24 68
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  001a3	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  001ab	8b 94 24 58 01
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001b2	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001c0	48 89 44 24 60	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 171  : 	}
; 172  : 	break;
; 173  : 	}
; 174  : 	return (Result);

  001c5	48 8b 44 24 60	 mov	 rax, QWORD PTR Result$[rsp]

; 175  : }

  001ca	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d2	48 33 cc	 xor	 rcx, rsp
  001d5	e8 00 00 00 00	 call	 __security_check_cookie
  001da	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  001e1	5f		 pop	 rdi
  001e2	5e		 pop	 rsi
  001e3	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
DeviceContext$ = 128
WindowWidth$ = 136
WindowHeight$ = 144
Buffer$ = 152
x$ = 160
y$ = 168
Width$ = 176
Height$ = 184
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z PROC ; Win32DisplayBufferInWindow

; 104  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 105  : 	//TODO: Aspect Ratio Correction
; 106  : 	StretchDIBits(DeviceContext,

  00017	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0001f	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  00027	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  0002f	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00034	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00040	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00045	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0004d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00050	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00054	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005c	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  0005f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00063	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0006b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00073	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007e	44 8b 8c 24 88
	00 00 00	 mov	 r9d, DWORD PTR WindowWidth$[rsp]
  00086	45 33 c0	 xor	 r8d, r8d
  00089	33 d2		 xor	 edx, edx
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 107  : 				  0, 0, WindowWidth, WindowHeight,
; 108  : 				  0, 0, Buffer.Width, Buffer.Height,
; 109  : 				  Buffer.Memory,
; 110  : 				  &Buffer.Info,
; 111  : 				  DIB_RGB_COLORS, SRCCOPY);
; 112  : }

  00099	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0009d	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Buffer$ = 64
Width$ = 72
Height$ = 80
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection

; 80   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   : 	if (Buffer->Memory)

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0001c	74 17		 je	 SHORT $LN2@Win32Resiz

; 82   : 	{
; 83   : 		VirtualFree(Buffer->Memory, 0, MEM_RELEASE);

  0001e	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  00024	33 d2		 xor	 edx, edx
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0002b	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 84   : 	}
; 85   : 
; 86   : 	Buffer->Width = Width;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0003a	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  0003e	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 87   : 	Buffer->Height = Height; 

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00046	8b 4c 24 50	 mov	 ecx, DWORD PTR Height$[rsp]
  0004a	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 88   : 	Buffer->BytesPerPixel = 4;

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00052	c7 40 44 04 00
	00 00		 mov	 DWORD PTR [rax+68], 4

; 89   : 
; 90   : 	Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00059	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  0005e	c7 00 28 00 00
	00		 mov	 DWORD PTR [rax], 40	; 00000028H

; 91   : 	Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0006e	8b 49 38	 mov	 ecx, DWORD PTR [rcx+56]
  00071	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 92   : 	Buffer->Info.bmiHeader.biHeight = -Buffer->Height; // negative top yield a 'top down'

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  00079	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0007c	f7 d8		 neg	 eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 93   : 	Buffer->Info.bmiHeader.biPlanes = 1;

  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00090	66 89 41 0c	 mov	 WORD PTR [rcx+12], ax

; 94   : 	Buffer->Info.bmiHeader.biBitCount = 32;

  00094	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  0009e	66 89 41 0e	 mov	 WORD PTR [rcx+14], ax

; 95   : 	Buffer->Info.bmiHeader.biCompression = BI_RGB;

  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000a7	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 96   : 
; 97   : 	int BitmapMemorySize = (Buffer->Width * Buffer->Height) * Buffer->BytesPerPixel;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000b8	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000bb	0f af 41 3c	 imul	 eax, DWORD PTR [rcx+60]
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000c4	0f af 41 44	 imul	 eax, DWORD PTR [rcx+68]
  000c8	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 98   : 	Buffer->Memory = VirtualAlloc(0,BitmapMemorySize,MEM_COMMIT,PAGE_READWRITE);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000d1	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d7	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000dd	48 8b d0	 mov	 rdx, rax
  000e0	33 c9		 xor	 ecx, ecx
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  000ed	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 99   : 
; 100  : 	Buffer->Pitch = Width * Buffer->BytesPerPixel;  // Pitch is the difference between rows of pixels in Bytes

  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR Buffer$[rsp]
  000f6	8b 4c 24 48	 mov	 ecx, DWORD PTR Width$[rsp]
  000fa	0f af 48 44	 imul	 ecx, DWORD PTR [rax+68]
  000fe	8b c1		 mov	 eax, ecx
  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Buffer$[rsp]
  00105	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 101  : }

  00108	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010c	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
X$1 = 0
Y$2 = 4
Pixel$3 = 8
Row$ = 16
Buffer$ = 48
BlueOffset$ = 56
GreenOffset$ = 64
?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z PROC ; RenderWeirdGradient

; 52   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 53   : 	uint8 *Row = (uint8 *)Buffer.Memory; // cast the void pointer BitmapMemory to unsigned 8 bit int

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00017	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0001b	48 89 44 24 10	 mov	 QWORD PTR Row$[rsp], rax

; 54   : 	for (int Y = 0; Y < Buffer.Height; ++Y)

  00020	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR Y$2[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  0002a	8b 44 24 04	 mov	 eax, DWORD PTR Y$2[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 04	 mov	 DWORD PTR Y$2[rsp], eax
$LN4@RenderWeir:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00039	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  0003c	39 44 24 04	 cmp	 DWORD PTR Y$2[rsp], eax
  00040	0f 8d b1 00 00
	00		 jge	 $LN3@RenderWeir

; 55   : 	{
; 56   : 		//uint32 *Pixel = (uint32 *)Row; //pointer to first pixel of Row
; 57   : 		uint8 *Pixel = (uint8 *)Row; //pointer to first byte of first pixel of Row

  00046	48 8b 44 24 10	 mov	 rax, QWORD PTR Row$[rsp]
  0004b	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 58   : 
; 59   : 		for (int X = 0; X <Buffer.Width; ++X) 

  00050	c7 04 24 00 00
	00 00		 mov	 DWORD PTR X$1[rsp], 0
  00057	eb 08		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00059	8b 04 24	 mov	 eax, DWORD PTR X$1[rsp]
  0005c	ff c0		 inc	 eax
  0005e	89 04 24	 mov	 DWORD PTR X$1[rsp], eax
$LN7@RenderWeir:
  00061	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  00066	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00069	39 04 24	 cmp	 DWORD PTR X$1[rsp], eax
  0006c	7d 6b		 jge	 SHORT $LN6@RenderWeir

; 60   : 		{
; 61   : 
; 62   : 			*Pixel = (uint8)(X+BlueOffset); //Blue

  0006e	8b 44 24 38	 mov	 eax, DWORD PTR BlueOffset$[rsp]
  00072	8b 0c 24	 mov	 ecx, DWORD PTR X$1[rsp]
  00075	03 c8		 add	 ecx, eax
  00077	8b c1		 mov	 eax, ecx
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Pixel$3[rsp]
  0007e	88 01		 mov	 BYTE PTR [rcx], al

; 63   : 			++Pixel;

  00080	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  00085	48 ff c0	 inc	 rax
  00088	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 64   : 
; 65   : 			*Pixel = (uint8)(Y+GreenOffset); //Green

  0008d	8b 44 24 40	 mov	 eax, DWORD PTR GreenOffset$[rsp]
  00091	8b 4c 24 04	 mov	 ecx, DWORD PTR Y$2[rsp]
  00095	03 c8		 add	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Pixel$3[rsp]
  0009e	88 01		 mov	 BYTE PTR [rcx], al

; 66   : 			++Pixel;

  000a0	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000a5	48 ff c0	 inc	 rax
  000a8	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 67   : 
; 68   : 			*Pixel = 0; //Red

  000ad	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000b2	c6 00 00	 mov	 BYTE PTR [rax], 0

; 69   : 			++Pixel;

  000b5	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000ba	48 ff c0	 inc	 rax
  000bd	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 70   : 
; 71   : 			*Pixel = 0;

  000c2	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000c7	c6 00 00	 mov	 BYTE PTR [rax], 0

; 72   : 			++Pixel;

  000ca	48 8b 44 24 08	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000cf	48 ff c0	 inc	 rax
  000d2	48 89 44 24 08	 mov	 QWORD PTR Pixel$3[rsp], rax

; 73   : 		}

  000d7	eb 80		 jmp	 SHORT $LN5@RenderWeir
$LN6@RenderWeir:

; 74   : 
; 75   : 		Row += Buffer.Pitch;

  000d9	48 8b 44 24 30	 mov	 rax, QWORD PTR Buffer$[rsp]
  000de	48 63 40 40	 movsxd	 rax, DWORD PTR [rax+64]
  000e2	48 8b 4c 24 10	 mov	 rcx, QWORD PTR Row$[rsp]
  000e7	48 03 c8	 add	 rcx, rax
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 89 44 24 10	 mov	 QWORD PTR Row$[rsp], rax

; 76   : 	}

  000f2	e9 33 ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 77   : }

  000f7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000fb	c3		 ret	 0
?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z ENDP ; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Result$ = 32
ClientRect$ = 40
__$ArrayPad$ = 56
Window$ = 80
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z PROC ; Win32GetWindowDimension

; 37   : win32_window_dimension Win32GetWindowDimension(HWND Window){

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 38   : 
; 39   : 	RECT ClientRect;
; 40   : 	win32_window_dimension Result;
; 41   : 	GetClientRect(Window, &ClientRect);

  00018	48 8d 54 24 28	 lea	 rdx, QWORD PTR ClientRect$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR Window$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 42   : 	Result.Width = ClientRect.right - ClientRect.left;

  00028	8b 44 24 28	 mov	 eax, DWORD PTR ClientRect$[rsp]
  0002c	8b 4c 24 30	 mov	 ecx, DWORD PTR ClientRect$[rsp+8]
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 20	 mov	 DWORD PTR Result$[rsp], eax

; 43   : 	Result.Height = ClientRect.bottom - ClientRect.top;

  00038	8b 44 24 2c	 mov	 eax, DWORD PTR ClientRect$[rsp+4]
  0003c	8b 4c 24 34	 mov	 ecx, DWORD PTR ClientRect$[rsp+12]
  00040	2b c8		 sub	 ecx, eax
  00042	8b c1		 mov	 eax, ecx
  00044	89 44 24 24	 mov	 DWORD PTR Result$[rsp+4], eax

; 44   : 	return(Result);

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR Result$[rsp]

; 45   : 	
; 46   : }

  0004d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00052	48 33 cc	 xor	 rcx, rsp
  00055	e8 00 00 00 00	 call	 __security_check_cookie
  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ENDP ; Win32GetWindowDimension
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BlueOffset$1 = 96
GreenOffset$2 = 100
Dimension$3 = 104
Window$4 = 112
DeviceContext$5 = 120
$T6 = 128
WindowClass$ = 144
Message$7 = 224
$T8 = 272
$T9 = 352
Instance$ = 464
PrevInstance$ = 472
Command$ = 480
ShowCode$ = 488
WinMain	PROC

; 182  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H

; 183  : 
; 184  : 	WNDCLASS WindowClass = {}; // declares a WNDCLASS instance 'windowClass', with members initialized to 0.

  0001d	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0002f	f3 aa		 rep stosb

; 185  : 
; 186  : 	Win32ResizeDIBSection(&GlobalBackBuffer, 1280,720);

  00031	41 b8 d0 02 00
	00		 mov	 r8d, 720		; 000002d0H
  00037	ba 00 05 00 00	 mov	 edx, 1280		; 00000500H
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  00043	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPEAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection

; 187  : 
; 188  : 	WindowClass.style = CS_HREDRAW | CS_VREDRAW; // bitfield flags to define windowstyle see MSDN

  00048	c7 84 24 90 00
	00 00 03 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 3

; 189  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;// pointer to a function that defines window's response to events

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0005a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 190  : 	WindowClass.hInstance = Instance; // reference to the instance of this window, from WinMain function.(Could also use GetModuleHandle)

  00062	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  0006a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 191  : 	// WindowClass.hIcon = ; // icon for window
; 192  : 	WindowClass.lpszClassName = "handmadeHeroWindowClass";

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89995
  00079	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 193  : 
; 194  : 
; 195  : 
; 196  : 	if (RegisterClass(&WindowClass))

  00081	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0008f	0f b7 c0	 movzx	 eax, ax
  00092	85 c0		 test	 eax, eax
  00094	0f 84 ce 01 00
	00		 je	 $LN6@WinMain

; 197  : 	{
; 198  : 		HWND Window = CreateWindowEx(

  0009a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000a3	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000ab	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000b0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000b9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000c2	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000ca	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000d2	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000da	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000e2	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG89998
  000ef	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000f7	33 c9		 xor	 ecx, ecx
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000ff	48 89 44 24 70	 mov	 QWORD PTR Window$4[rsp], rax

; 199  : 			0,
; 200  : 			WindowClass.lpszClassName,
; 201  : 			"Handmade Hero",
; 202  : 			WS_OVERLAPPEDWINDOW | WS_VISIBLE,
; 203  : 			CW_USEDEFAULT,
; 204  : 			CW_USEDEFAULT,
; 205  : 			CW_USEDEFAULT,
; 206  : 			CW_USEDEFAULT,
; 207  : 			0,
; 208  : 			0,
; 209  : 			Instance,
; 210  : 			0);
; 211  : 
; 212  : 		if (Window)

  00104	48 83 7c 24 70
	00		 cmp	 QWORD PTR Window$4[rsp], 0
  0010a	0f 84 58 01 00
	00		 je	 $LN8@WinMain

; 213  : 		{
; 214  : 			int BlueOffset=0;

  00110	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR BlueOffset$1[rsp], 0

; 215  : 			int GreenOffset=0;

  00118	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR GreenOffset$2[rsp], 0

; 216  : 
; 217  : 			Running = true;

  00120	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1
$LN2@WinMain:

; 218  : 			while (Running)

  00127	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA
  0012e	85 c0		 test	 eax, eax
  00130	0f 84 32 01 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 219  : 			{
; 220  : 				//
; 221  : 				MSG Message;
; 222  : 				while(PeekMessage(&Message, 0, 0, 0,PM_REMOVE))

  00136	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0013e	45 33 c9	 xor	 r9d, r9d
  00141	45 33 c0	 xor	 r8d, r8d
  00144	33 d2		 xor	 edx, edx
  00146	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  00154	85 c0		 test	 eax, eax
  00156	74 2f		 je	 SHORT $LN5@WinMain

; 223  : 				{
; 224  : 					if (Message.message == WM_QUIT)

  00158	83 bc 24 e8 00
	00 00 12	 cmp	 DWORD PTR Message$7[rsp+8], 18
  00160	75 07		 jne	 SHORT $LN10@WinMain

; 225  : 					{
; 226  : 						Running=false;

  00162	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0
$LN10@WinMain:

; 227  : 					}
; 228  : 
; 229  : 					TranslateMessage(&Message);

  00169	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 230  : 					DispatchMessageA(&Message);

  00177	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 231  : 				}

  00185	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 232  : 				RenderWeirdGradient(GlobalBackBuffer,BlueOffset,GreenOffset);

  00187	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  00196	48 8b f8	 mov	 rdi, rax
  00199	48 8b f1	 mov	 rsi, rcx
  0019c	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  001a1	f3 a4		 rep movsb
  001a3	44 8b 44 24 64	 mov	 r8d, DWORD PTR GreenOffset$2[rsp]
  001a8	8b 54 24 60	 mov	 edx, DWORD PTR BlueOffset$1[rsp]
  001ac	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  001b4	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXUwin32_offscreen_buffer@@HH@Z ; RenderWeirdGradient

; 233  : 
; 234  : 				HDC DeviceContext = GetDC(Window);

  001b9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  001c4	48 89 44 24 78	 mov	 QWORD PTR DeviceContext$5[rsp], rax

; 235  : 				win32_window_dimension Dimension= Win32GetWindowDimension(Window);

  001c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  001ce	e8 00 00 00 00	 call	 ?Win32GetWindowDimension@@YA?AUwin32_window_dimension@@PEAUHWND__@@@Z ; Win32GetWindowDimension
  001d3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T6[rsp], rax
  001db	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  001e3	48 89 44 24 68	 mov	 QWORD PTR Dimension$3[rsp], rax

; 236  : 				Win32DisplayBufferInWindow(DeviceContext, Dimension.Width, Dimension.Height, GlobalBackBuffer, 0, 0,  Dimension.Width, Dimension.Height);

  001e8	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  001f7	48 8b f8	 mov	 rdi, rax
  001fa	48 8b f1	 mov	 rsi, rcx
  001fd	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00202	f3 a4		 rep movsb
  00204	8b 44 24 6c	 mov	 eax, DWORD PTR Dimension$3[rsp+4]
  00208	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0020c	8b 44 24 68	 mov	 eax, DWORD PTR Dimension$3[rsp]
  00210	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00214	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0021c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00224	4c 8d 8c 24 60
	01 00 00	 lea	 r9, QWORD PTR $T9[rsp]
  0022c	44 8b 44 24 6c	 mov	 r8d, DWORD PTR Dimension$3[rsp+4]
  00231	8b 54 24 68	 mov	 edx, DWORD PTR Dimension$3[rsp]
  00235	48 8b 4c 24 78	 mov	 rcx, QWORD PTR DeviceContext$5[rsp]
  0023a	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPEAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow

; 237  : 				ReleaseDC(Window,DeviceContext);

  0023f	48 8b 54 24 78	 mov	 rdx, QWORD PTR DeviceContext$5[rsp]
  00244	48 8b 4c 24 70	 mov	 rcx, QWORD PTR Window$4[rsp]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 238  : 
; 239  : 				++BlueOffset;

  0024f	8b 44 24 60	 mov	 eax, DWORD PTR BlueOffset$1[rsp]
  00253	ff c0		 inc	 eax
  00255	89 44 24 60	 mov	 DWORD PTR BlueOffset$1[rsp], eax

; 240  : 				++GreenOffset;

  00259	8b 44 24 64	 mov	 eax, DWORD PTR GreenOffset$2[rsp]
  0025d	ff c0		 inc	 eax
  0025f	89 44 24 64	 mov	 DWORD PTR GreenOffset$2[rsp], eax

; 241  : 			}

  00263	e9 bf fe ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN8@WinMain:
$LN6@WinMain:

; 242  : 		}
; 243  : 		else
; 244  : 		{
; 245  : 			//todo: logging
; 246  : 		}
; 247  : 	}
; 248  : 	else
; 249  : 	{
; 250  : 		//todo: logging
; 251  : 	}
; 252  : 
; 253  : 	return (0);

  00268	33 c0		 xor	 eax, eax

; 254  : }

  0026a	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  00271	5f		 pop	 rdi
  00272	5e		 pop	 rsi
  00273	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
