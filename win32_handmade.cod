; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25831.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
?Offset@@3HA DD	01H DUP (?)				; Offset
_BSS	ENDS
CONST	SEGMENT
$SG88333 DB	'WM_SIZE', 0aH, 00H
	ORG $+7
$SG88335 DB	'WM_DESTROY', 0aH, 00H
	ORG $+4
$SG88337 DB	'WM_CLOSE', 0aH, 00H
	ORG $+6
$SG88339 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG88365 DB	'handmadeHeroWindowClass', 00H
$SG88368 DB	'Handmade Hero', 00H
CONST	ENDS
_DATA	SEGMENT
?BytesPerPixel@@3HA DD 04H				; BytesPerPixel
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?Running@@3_NA DB 01H DUP (?)				; Running
	ALIGN	4

?BitmapInfo@@3UtagBITMAPINFO@@A DB 02cH DUP (?)		; BitmapInfo
	ALIGN	8

?BitmapMemory@@3PEAXEA DQ 01H DUP (?)			; BitmapMemory
?BitmapWidth@@3HA DD 01H DUP (?)			; BitmapWidth
?BitmapHeight@@3HA DD 01H DUP (?)			; BitmapHeight
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN12
	DD	imagerel $LN12+584
	DD	imagerel $unwind$WinMain
$pdata$?RenderWeirdGradient@@YAXHH@Z DD imagerel ?RenderWeirdGradient@@YAXHH@Z
	DD	imagerel ?RenderWeirdGradient@@YAXHH@Z+271
	DD	imagerel $unwind$?RenderWeirdGradient@@YAXHH@Z
$pdata$?Win32ResizeDIBSection@@YAXHH@Z DD imagerel ?Win32ResizeDIBSection@@YAXHH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXHH@Z+197
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXHH@Z
$pdata$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
	DD	imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z+198
	DD	imagerel $unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+510
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 032e19H
	DD	026011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$?RenderWeirdGradient@@YAXHH@Z DD 010c01H
	DD	0620cH
$unwind$?Win32ResizeDIBSection@@YAXHH@Z DD 010c01H
	DD	0620cH
$unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD 021b01H
	DD	011011bH
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 48
Height$1 = 52
Width$2 = 56
Height$3 = 60
Width$4 = 64
Y$5 = 68
X$6 = 72
Result$ = 80
DeviceContext$7 = 88
ClientRect$8 = 96
ClientRect$9 = 112
Paint$10 = 128
__$ArrayPad$ = 208
Window$ = 240
Message$ = 248
WParam$ = 256
LParam$ = 264
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 111  : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 112  : 	LRESULT Result = 0;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 113  : 
; 114  : 	switch (Message)

  00035	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 30 02	 cmp	 DWORD PTR tv64[rsp], 2
  00045	74 7b		 je	 SHORT $LN5@Win32MainW
  00047	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0004c	74 22		 je	 SHORT $LN4@Win32MainW
  0004e	83 7c 24 30 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00053	0f 84 ad 00 00
	00		 je	 $LN8@Win32MainW
  00059	83 7c 24 30 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005e	74 7b		 je	 SHORT $LN6@Win32MainW
  00060	83 7c 24 30 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00065	0f 84 89 00 00
	00		 je	 $LN7@Win32MainW
  0006b	e9 47 01 00 00	 jmp	 $LN9@Win32MainW
$LN4@Win32MainW:

; 115  : 	{
; 116  : 	case WM_SIZE:
; 117  : 	{
; 118  : 		RECT ClientRect;
; 119  : 		GetClientRect(Window, &ClientRect);

  00070	48 8d 54 24 60	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  00075	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 120  : 		int Width = ClientRect.right - ClientRect.left;

  00083	8b 44 24 60	 mov	 eax, DWORD PTR ClientRect$8[rsp]
  00087	8b 4c 24 68	 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  0008b	2b c8		 sub	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 44 24 38	 mov	 DWORD PTR Width$2[rsp], eax

; 121  : 		int Height = ClientRect.bottom - ClientRect.top;

  00093	8b 44 24 64	 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  00097	8b 4c 24 6c	 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  0009b	2b c8		 sub	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	89 44 24 34	 mov	 DWORD PTR Height$1[rsp], eax

; 122  : 		Win32ResizeDIBSection(Width, Height);

  000a3	8b 54 24 34	 mov	 edx, DWORD PTR Height$1[rsp]
  000a7	8b 4c 24 38	 mov	 ecx, DWORD PTR Width$2[rsp]
  000ab	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXHH@Z ; Win32ResizeDIBSection

; 123  : 		OutputDebugStringA("WM_SIZE\n");

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG88333
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 124  : 	}
; 125  : 	break;

  000bd	e9 1f 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 126  : 
; 127  : 	case WM_DESTROY:
; 128  : 	{
; 129  : 		//handle as error, recreate window
; 130  : 		Running = false;

  000c2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 131  : 		OutputDebugStringA("WM_DESTROY\n");

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG88335
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 132  : 	}
; 133  : 	break;

  000d6	e9 06 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 134  : 
; 135  : 	case WM_CLOSE:
; 136  : 	{
; 137  : 		//todo: handle with message to user
; 138  : 		Running = false;

  000db	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 139  : 		OutputDebugStringA("WM_CLOSE\n");

  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG88337
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 140  : 	}
; 141  : 	break;

  000ef	e9 ed 00 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 142  : 
; 143  : 	case WM_ACTIVATEAPP:
; 144  : 	{
; 145  : 		OutputDebugStringA("WM_ACTIVATEAPP\n");

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG88339
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 146  : 	}
; 147  : 	break;

  00101	e9 db 00 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 148  : 
; 149  : 	case WM_PAINT:
; 150  : 	{
; 151  : 		PAINTSTRUCT Paint;
; 152  : 		HDC DeviceContext = BeginPaint(Window, &Paint);

  00106	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  0010e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  0011c	48 89 44 24 58	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 153  : 		int X = Paint.rcPaint.left;

  00121	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  00128	89 44 24 48	 mov	 DWORD PTR X$6[rsp], eax

; 154  : 		int Y = Paint.rcPaint.top;

  0012c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00133	89 44 24 44	 mov	 DWORD PTR Y$5[rsp], eax

; 155  : 		int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00137	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  0013e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+20]
  00145	2b c8		 sub	 ecx, eax
  00147	8b c1		 mov	 eax, ecx
  00149	89 44 24 40	 mov	 DWORD PTR Width$4[rsp], eax

; 156  : 		int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0014d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00154	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+24]
  0015b	2b c8		 sub	 ecx, eax
  0015d	8b c1		 mov	 eax, ecx
  0015f	89 44 24 3c	 mov	 DWORD PTR Height$3[rsp], eax

; 157  : 		RECT ClientRect;
; 158  : 		GetClientRect(Window, &ClientRect);

  00163	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  00168	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 159  : 		Win32UpdateWindow(DeviceContext, &ClientRect, X, Y, Width, Height);

  00176	8b 44 24 3c	 mov	 eax, DWORD PTR Height$3[rsp]
  0017a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0017e	8b 44 24 40	 mov	 eax, DWORD PTR Width$4[rsp]
  00182	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00186	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Y$5[rsp]
  0018b	44 8b 44 24 48	 mov	 r8d, DWORD PTR X$6[rsp]
  00190	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  00195	48 8b 4c 24 58	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  0019a	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ; Win32UpdateWindow

; 160  : 		EndPaint(Window, &Paint);

  0019f	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  001a7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 161  : 	}
; 162  : 	break;

  001b5	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN9@Win32MainW:

; 163  : 
; 164  : 	default:
; 165  : 	{
; 166  : 
; 167  : 		//OutputDebugStringA("DEFAULT\n");
; 168  : 		Result = DefWindowProc(Window, Message, WParam, LParam);

  001b7	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  001bf	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  001c7	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001ce	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001dc	48 89 44 24 50	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 169  : 	}
; 170  : 	break;
; 171  : 	}
; 172  : 	return (Result);

  001e1	48 8b 44 24 50	 mov	 rax, QWORD PTR Result$[rsp]

; 173  : }

  001e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ee	48 33 cc	 xor	 rcx, rsp
  001f1	e8 00 00 00 00	 call	 __security_check_cookie
  001f6	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001fd	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
WindowHeight$ = 112
WindowWidth$ = 116
DeviceContext$ = 144
ClientRect$ = 152
x$ = 160
y$ = 168
Width$ = 176
Height$ = 184
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z PROC ; Win32UpdateWindow

; 93   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 94   : 	
; 95   : 	int WindowWidth = ClientRect->right - ClientRect->left;

  0001b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  00023	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  0002b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	2b c1		 sub	 eax, ecx
  00032	89 44 24 74	 mov	 DWORD PTR WindowWidth$[rsp], eax

; 96   : 	int WindowHeight = ClientRect->bottom - ClientRect->top;

  00036	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ClientRect$[rsp]
  0003e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ClientRect$[rsp]
  00046	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00049	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0004c	2b c1		 sub	 eax, ecx
  0004e	89 44 24 70	 mov	 DWORD PTR WindowHeight$[rsp], eax

; 97   : 
; 98   : 	StretchDIBits(DeviceContext,

  00052	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0005a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?BitmapInfo@@3UtagBITMAPINFO@@A
  00069	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  00075	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0007a	8b 44 24 70	 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00082	8b 44 24 74	 mov	 eax, DWORD PTR WindowWidth$[rsp]
  00086	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0008a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00092	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0009a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  000a0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a4	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?BitmapWidth@@3HA
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	33 d2		 xor	 edx, edx
  000b0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 99   : 				  0, 0, BitmapWidth, BitmapHeight,
; 100  : 				  0, 0, WindowWidth, WindowHeight,
; 101  : 				  BitmapMemory,
; 102  : 				  &BitmapInfo,
; 103  : 				  DIB_RGB_COLORS, SRCCOPY);
; 104  : }

  000be	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000c5	c3		 ret	 0
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ENDP ; Win32UpdateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
BitmapMemorySize$ = 32
Width$ = 64
Height$ = 72
?Win32ResizeDIBSection@@YAXHH@Z PROC			; Win32ResizeDIBSection

; 66   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 67   : 	if (BitmapMemory)

  0000c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?BitmapMemory@@3PEAXEA, 0
  00014	74 15		 je	 SHORT $LN2@Win32Resiz

; 68   : 	{
; 69   : 		VirtualFree(BitmapMemory, 0, MEM_RELEASE);

  00016	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?BitmapMemory@@3PEAXEA
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN2@Win32Resiz:

; 70   : 	}
; 71   : 
; 72   : 	BitmapWidth = Width;

  0002b	8b 44 24 40	 mov	 eax, DWORD PTR Width$[rsp]
  0002f	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapWidth@@3HA, eax

; 73   : 	BitmapHeight = Height;

  00035	8b 44 24 48	 mov	 eax, DWORD PTR Height$[rsp]
  00039	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapHeight@@3HA, eax

; 74   : 	BitmapInfo.bmiHeader.biSize = sizeof(BitmapInfo.bmiHeader);

  0003f	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A, 40 ; 00000028H

; 75   : 	BitmapInfo.bmiHeader.biWidth = BitmapWidth;

  00049	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  0004f	89 05 04 00 00
	00		 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+4, eax

; 76   : 	BitmapInfo.bmiHeader.biHeight = -BitmapHeight; // negative top yield a 'top down'

  00055	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0005b	f7 d8		 neg	 eax
  0005d	89 05 08 00 00
	00		 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+8, eax

; 77   : 	BitmapInfo.bmiHeader.biPlanes = 1;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	66 89 05 0c 00
	00 00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+12, ax

; 78   : 	BitmapInfo.bmiHeader.biBitCount = 32;

  0006f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00074	66 89 05 0e 00
	00 00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+14, ax

; 79   : 	BitmapInfo.bmiHeader.biCompression = BI_RGB;

  0007b	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+16, 0

; 80   : 
; 81   : 	int BitmapMemorySize = (BitmapWidth * BitmapHeight) * BytesPerPixel;

  00085	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  0008b	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BitmapHeight@@3HA
  00092	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BytesPerPixel@@3HA
  00099	89 44 24 20	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 82   : 
; 83   : 	BitmapMemory = VirtualAlloc(

  0009d	48 63 44 24 20	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000a2	41 b9 04 00 00
	00		 mov	 r9d, 4
  000a8	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	33 c9		 xor	 ecx, ecx
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?BitmapMemory@@3PEAXEA, rax

; 84   : 		0,				  //address 0 = we don't care yet
; 85   : 		BitmapMemorySize, //size in bytes
; 86   : 		MEM_COMMIT,		  // vs MEM_RESERVE
; 87   : 		PAGE_READWRITE	// access mode
; 88   : 	);
; 89   : 
; 90   : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
?Win32ResizeDIBSection@@YAXHH@Z ENDP			; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
X$1 = 0
Y$2 = 4
Width$ = 8
Pitch$ = 12
Height$ = 16
Pixel$3 = 24
Row$ = 32
XOffset$ = 64
YOffset$ = 72
?RenderWeirdGradient@@YAXHH@Z PROC			; RenderWeirdGradient

; 35   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 36   : 	int Width=BitmapWidth;

  0000c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00012	89 44 24 08	 mov	 DWORD PTR Width$[rsp], eax

; 37   : 	int Height = BitmapHeight;

  00016	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0001c	89 44 24 10	 mov	 DWORD PTR Height$[rsp], eax

; 38   : 	int Pitch = Width * BytesPerPixel;  // Pitch is the difference between rows of pixels in Bytes

  00020	8b 44 24 08	 mov	 eax, DWORD PTR Width$[rsp]
  00024	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BytesPerPixel@@3HA
  0002b	89 44 24 0c	 mov	 DWORD PTR Pitch$[rsp], eax

; 39   : 	uint8 *Row = (uint8 *)BitmapMemory; // cast the void pointer BitmapMemory to unsigned 8 bit int

  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  00036	48 89 44 24 20	 mov	 QWORD PTR Row$[rsp], rax

; 40   : 	for (int Y = 0; Y < BitmapHeight; ++Y)

  0003b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR Y$2[rsp], 0
  00043	eb 0a		 jmp	 SHORT $LN4@RenderWeir
$LN2@RenderWeir:
  00045	8b 44 24 04	 mov	 eax, DWORD PTR Y$2[rsp]
  00049	ff c0		 inc	 eax
  0004b	89 44 24 04	 mov	 DWORD PTR Y$2[rsp], eax
$LN4@RenderWeir:
  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  00055	39 44 24 04	 cmp	 DWORD PTR Y$2[rsp], eax
  00059	0f 8d ab 00 00
	00		 jge	 $LN3@RenderWeir

; 41   : 	{
; 42   : 		//uint32 *Pixel = (uint32 *)Row; //pointer to first pixel of Row
; 43   : 		uint8 *Pixel = (uint8 *)Row; //pointer to first byte of first pixel of Row

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR Row$[rsp]
  00064	48 89 44 24 18	 mov	 QWORD PTR Pixel$3[rsp], rax

; 44   : 
; 45   : 		for (int X = 0; X < BitmapWidth; ++X)

  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR X$1[rsp], 0
  00070	eb 08		 jmp	 SHORT $LN7@RenderWeir
$LN5@RenderWeir:
  00072	8b 04 24	 mov	 eax, DWORD PTR X$1[rsp]
  00075	ff c0		 inc	 eax
  00077	89 04 24	 mov	 DWORD PTR X$1[rsp], eax
$LN7@RenderWeir:
  0007a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00080	39 04 24	 cmp	 DWORD PTR X$1[rsp], eax
  00083	7d 6b		 jge	 SHORT $LN6@RenderWeir

; 46   : 		{
; 47   : 
; 48   : 			*Pixel = (uint8)(X+XOffset); //Blue

  00085	8b 44 24 40	 mov	 eax, DWORD PTR XOffset$[rsp]
  00089	8b 0c 24	 mov	 ecx, DWORD PTR X$1[rsp]
  0008c	03 c8		 add	 ecx, eax
  0008e	8b c1		 mov	 eax, ecx
  00090	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Pixel$3[rsp]
  00095	88 01		 mov	 BYTE PTR [rcx], al

; 49   : 			++Pixel;

  00097	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  0009c	48 ff c0	 inc	 rax
  0009f	48 89 44 24 18	 mov	 QWORD PTR Pixel$3[rsp], rax

; 50   : 
; 51   : 			*Pixel = (uint8)(Y+YOffset); //Green

  000a4	8b 44 24 48	 mov	 eax, DWORD PTR YOffset$[rsp]
  000a8	8b 4c 24 04	 mov	 ecx, DWORD PTR Y$2[rsp]
  000ac	03 c8		 add	 ecx, eax
  000ae	8b c1		 mov	 eax, ecx
  000b0	48 8b 4c 24 18	 mov	 rcx, QWORD PTR Pixel$3[rsp]
  000b5	88 01		 mov	 BYTE PTR [rcx], al

; 52   : 			++Pixel;

  000b7	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000bc	48 ff c0	 inc	 rax
  000bf	48 89 44 24 18	 mov	 QWORD PTR Pixel$3[rsp], rax

; 53   : 
; 54   : 			*Pixel = 128; //Red

  000c4	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000c9	c6 00 80	 mov	 BYTE PTR [rax], 128	; 00000080H

; 55   : 			++Pixel;

  000cc	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000d1	48 ff c0	 inc	 rax
  000d4	48 89 44 24 18	 mov	 QWORD PTR Pixel$3[rsp], rax

; 56   : 
; 57   : 			*Pixel = 0;

  000d9	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000de	c6 00 00	 mov	 BYTE PTR [rax], 0

; 58   : 			++Pixel;

  000e1	48 8b 44 24 18	 mov	 rax, QWORD PTR Pixel$3[rsp]
  000e6	48 ff c0	 inc	 rax
  000e9	48 89 44 24 18	 mov	 QWORD PTR Pixel$3[rsp], rax

; 59   : 		}

  000ee	eb 82		 jmp	 SHORT $LN5@RenderWeir
$LN6@RenderWeir:

; 60   : 
; 61   : 		Row += Pitch;

  000f0	48 63 44 24 0c	 movsxd	 rax, DWORD PTR Pitch$[rsp]
  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR Row$[rsp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	48 89 44 24 20	 mov	 QWORD PTR Row$[rsp], rax

; 62   : 	}

  00105	e9 3b ff ff ff	 jmp	 $LN2@RenderWeir
$LN3@RenderWeir:

; 63   : }

  0010a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010e	c3		 ret	 0
?RenderWeirdGradient@@YAXHH@Z ENDP			; RenderWeirdGradient
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
XOffset$1 = 96
Window$2 = 104
YOffset$3 = 112
WindowHeight$4 = 116
WindowWidth$5 = 120
DeviceContext$6 = 128
WindowClass$ = 144
Message$7 = 224
ClientRect$8 = 272
__$ArrayPad$ = 288
Instance$ = 320
PrevInstance$ = 328
Command$ = 336
ShowCode$ = 344
WinMain	PROC

; 180  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 181  : 
; 182  : 	WNDCLASS WindowClass = {}; // declares a WNDCLASS instance 'windowClass', with members initialized to 0.

  0002e	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	33 c0		 xor	 eax, eax
  0003b	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00040	f3 aa		 rep stosb

; 183  : 
; 184  : 	WindowClass.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW; // bitfield flags to define windowstyle see MSDN

  00042	c7 84 24 90 00
	00 00 23 00 00
	00		 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 185  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;		// pointer to a function that defines window's response to events

  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  00054	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 186  : 	// WindowClass.cbClsExtra = ; // if we want to store extra bytes
; 187  : 	// WindowClass.cbWndExtra = ; // if we want to store extra bytes
; 188  : 	WindowClass.hInstance = Instance; // reference to the instance of this window, from WinMain function.(Could also use GetModuleHandle)

  0005c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00064	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 189  : 	// WindowClass.hIcon = ; // icon for window
; 190  : 	// WindowClass.hCursor = ; // cursor position
; 191  : 	// WindowClass.hbrBackground = ; // background brush
; 192  : 	// WindowClass.lpszMenuName = ; // menu name
; 193  : 	WindowClass.lpszClassName = "handmadeHeroWindowClass";

  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG88365
  00073	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 194  : 
; 195  : 	if (RegisterClass(&WindowClass))

  0007b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  00089	0f b7 c0	 movzx	 eax, ax
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 99 01 00
	00		 je	 $LN6@WinMain

; 196  : 	{
; 197  : 		HWND Window = CreateWindowEx(

  00094	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  0009d	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  000a5	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000aa	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000b3	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  000bc	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000c4	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000cc	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000d4	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000dc	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG88368
  000e9	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000f1	33 c9		 xor	 ecx, ecx
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000f9	48 89 44 24 68	 mov	 QWORD PTR Window$2[rsp], rax

; 198  : 			0,
; 199  : 			WindowClass.lpszClassName,
; 200  : 			"Handmade Hero",
; 201  : 			WS_OVERLAPPEDWINDOW | WS_VISIBLE,
; 202  : 			CW_USEDEFAULT,
; 203  : 			CW_USEDEFAULT,
; 204  : 			CW_USEDEFAULT,
; 205  : 			CW_USEDEFAULT,
; 206  : 			0,
; 207  : 			0,
; 208  : 			Instance,
; 209  : 			0);
; 210  : 
; 211  : 		if (Window)

  000fe	48 83 7c 24 68
	00		 cmp	 QWORD PTR Window$2[rsp], 0
  00104	0f 84 23 01 00
	00		 je	 $LN8@WinMain

; 212  : 		{
; 213  : 			int XOffset=0;

  0010a	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR XOffset$1[rsp], 0

; 214  : 			int YOffset=0;

  00112	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR YOffset$3[rsp], 0

; 215  : 
; 216  : 			Running = true;

  0011a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1
$LN2@WinMain:

; 217  : 			while (Running)

  00121	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 fd 00 00
	00		 je	 $LN3@WinMain
$LN4@WinMain:

; 218  : 			{
; 219  : 				MSG Message;
; 220  : 				while(PeekMessage(&Message, 0, 0, 0,PM_REMOVE))

  00130	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00138	45 33 c9	 xor	 r9d, r9d
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	33 d2		 xor	 edx, edx
  00140	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PeekMessageA
  0014e	85 c0		 test	 eax, eax
  00150	74 2f		 je	 SHORT $LN5@WinMain

; 221  : 				{
; 222  : 					if (Message.message == WM_QUIT)

  00152	83 bc 24 e8 00
	00 00 12	 cmp	 DWORD PTR Message$7[rsp+8], 18
  0015a	75 07		 jne	 SHORT $LN10@WinMain

; 223  : 					{
; 224  : 						Running=false;

  0015c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0
$LN10@WinMain:

; 225  : 					}
; 226  : 
; 227  : 					TranslateMessage(&Message);

  00163	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 228  : 					DispatchMessageA(&Message);

  00171	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR Message$7[rsp]
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 229  : 				}

  0017f	eb af		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 230  : 				RenderWeirdGradient(XOffset,YOffset);

  00181	8b 54 24 70	 mov	 edx, DWORD PTR YOffset$3[rsp]
  00185	8b 4c 24 60	 mov	 ecx, DWORD PTR XOffset$1[rsp]
  00189	e8 00 00 00 00	 call	 ?RenderWeirdGradient@@YAXHH@Z ; RenderWeirdGradient

; 231  : 
; 232  : 				RECT ClientRect;
; 233  : 				HDC DeviceContext = GetDC(Window);

  0018e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00199	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR DeviceContext$6[rsp], rax

; 234  : 				GetClientRect(Window, &ClientRect);

  001a1	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  001a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 235  : 				int WindowWidth = ClientRect.right - ClientRect.left;

  001b4	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp]
  001bb	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  001c2	2b c8		 sub	 ecx, eax
  001c4	8b c1		 mov	 eax, ecx
  001c6	89 44 24 78	 mov	 DWORD PTR WindowWidth$5[rsp], eax

; 236  : 				int WindowHeight = ClientRect.bottom - ClientRect.top;

  001ca	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  001d1	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  001d8	2b c8		 sub	 ecx, eax
  001da	8b c1		 mov	 eax, ecx
  001dc	89 44 24 74	 mov	 DWORD PTR WindowHeight$4[rsp], eax

; 237  : 				Win32UpdateWindow( DeviceContext, &ClientRect, 0, 0, WindowWidth, WindowHeight);

  001e0	8b 44 24 74	 mov	 eax, DWORD PTR WindowHeight$4[rsp]
  001e4	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001e8	8b 44 24 78	 mov	 eax, DWORD PTR WindowWidth$5[rsp]
  001ec	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001f0	45 33 c9	 xor	 r9d, r9d
  001f3	45 33 c0	 xor	 r8d, r8d
  001f6	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  001fe	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$6[rsp]
  00206	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ; Win32UpdateWindow

; 238  : 				ReleaseDC(Window,DeviceContext);

  0020b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR DeviceContext$6[rsp]
  00213	48 8b 4c 24 68	 mov	 rcx, QWORD PTR Window$2[rsp]
  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 239  : 
; 240  : 				++XOffset;

  0021e	8b 44 24 60	 mov	 eax, DWORD PTR XOffset$1[rsp]
  00222	ff c0		 inc	 eax
  00224	89 44 24 60	 mov	 DWORD PTR XOffset$1[rsp], eax

; 241  : 			}

  00228	e9 f4 fe ff ff	 jmp	 $LN2@WinMain
$LN3@WinMain:
$LN8@WinMain:
$LN6@WinMain:

; 242  : 		}
; 243  : 		else
; 244  : 		{
; 245  : 			//todo: logging
; 246  : 		}
; 247  : 	}
; 248  : 	else
; 249  : 	{
; 250  : 		//todo: logging
; 251  : 	}
; 252  : 
; 253  : 	return (0);

  0022d	33 c0		 xor	 eax, eax

; 254  : }

  0022f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00237	48 33 cc	 xor	 rcx, rsp
  0023a	e8 00 00 00 00	 call	 __security_check_cookie
  0023f	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00246	5f		 pop	 rdi
  00247	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
