; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27031.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG89927 DB	'WM_SIZE', 0aH, 00H
	ORG $+7
$SG89929 DB	'WM_DESTROY', 0aH, 00H
	ORG $+4
$SG89931 DB	'WM_CLOSE', 0aH, 00H
	ORG $+6
$SG89933 DB	'WM_ACTIVATEAPP', 0aH, 00H
$SG89952 DB	'handmadeHeroWindowClass', 00H
$SG89955 DB	'Handmade Hero', 00H
CONST	ENDS
PUBLIC	WinMain
PUBLIC	?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_StretchDIBits:PROC
EXTRN	__imp_GetMessageA:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?Running@@3_NA DB 01H DUP (?)				; Running
	ALIGN	4

?BitmapInfo@@3UtagBITMAPINFO@@A DB 02cH DUP (?)		; BitmapInfo
?BitmapMemory@@3PEAXEA DQ 01H DUP (?)			; BitmapMemory
?BitmapWidth@@3HA DD 01H DUP (?)			; BitmapWidth
?BitmapHeight@@3HA DD 01H DUP (?)			; BitmapHeight
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN11
	DD	imagerel $LN11+328
	DD	imagerel $unwind$WinMain
$pdata$?Win32ResizeDIBSection@@YAXHH@Z DD imagerel ?Win32ResizeDIBSection@@YAXHH@Z
	DD	imagerel ?Win32ResizeDIBSection@@YAXHH@Z+449
	DD	imagerel $unwind$?Win32ResizeDIBSection@@YAXHH@Z
$pdata$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
	DD	imagerel ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z+198
	DD	imagerel $unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z
$pdata$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel $LN11
	DD	imagerel $LN11+510
	DD	imagerel $unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z
pdata	ENDS
xdata	SEGMENT
$unwind$WinMain DD 031c01H
	DD	01e011cH
	DD	07015H
$unwind$?Win32ResizeDIBSection@@YAXHH@Z DD 021e19H
	DD	011010fH
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z DD 021b01H
	DD	011011bH
$unwind$?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
tv64 = 48
Height$1 = 52
Width$2 = 56
Height$3 = 60
Width$4 = 64
Y$5 = 68
X$6 = 72
Result$ = 80
DeviceContext$7 = 88
ClientRect$8 = 96
ClientRect$9 = 112
Paint$10 = 128
__$ArrayPad$ = 208
Window$ = 240
Message$ = 248
WParam$ = 256
LParam$ = 264
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z PROC	; Win32MainWindowCallback

; 109  : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 110  : 	LRESULT Result = 0;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR Result$[rsp], 0

; 111  : 
; 112  : 	switch (Message)

  00035	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR Message$[rsp]
  0003c	89 44 24 30	 mov	 DWORD PTR tv64[rsp], eax
  00040	83 7c 24 30 02	 cmp	 DWORD PTR tv64[rsp], 2
  00045	74 7b		 je	 SHORT $LN5@Win32MainW
  00047	83 7c 24 30 05	 cmp	 DWORD PTR tv64[rsp], 5
  0004c	74 22		 je	 SHORT $LN4@Win32MainW
  0004e	83 7c 24 30 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00053	0f 84 ad 00 00
	00		 je	 $LN8@Win32MainW
  00059	83 7c 24 30 10	 cmp	 DWORD PTR tv64[rsp], 16
  0005e	74 7b		 je	 SHORT $LN6@Win32MainW
  00060	83 7c 24 30 1c	 cmp	 DWORD PTR tv64[rsp], 28
  00065	0f 84 89 00 00
	00		 je	 $LN7@Win32MainW
  0006b	e9 47 01 00 00	 jmp	 $LN9@Win32MainW
$LN4@Win32MainW:

; 113  : 	{
; 114  : 	case WM_SIZE:
; 115  : 	{
; 116  : 		RECT ClientRect;
; 117  : 		GetClientRect(Window, &ClientRect);

  00070	48 8d 54 24 60	 lea	 rdx, QWORD PTR ClientRect$8[rsp]
  00075	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 118  : 		int Width = ClientRect.right - ClientRect.left;

  00083	8b 44 24 60	 mov	 eax, DWORD PTR ClientRect$8[rsp]
  00087	8b 4c 24 68	 mov	 ecx, DWORD PTR ClientRect$8[rsp+8]
  0008b	2b c8		 sub	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 44 24 38	 mov	 DWORD PTR Width$2[rsp], eax

; 119  : 		int Height = ClientRect.bottom - ClientRect.top;

  00093	8b 44 24 64	 mov	 eax, DWORD PTR ClientRect$8[rsp+4]
  00097	8b 4c 24 6c	 mov	 ecx, DWORD PTR ClientRect$8[rsp+12]
  0009b	2b c8		 sub	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	89 44 24 34	 mov	 DWORD PTR Height$1[rsp], eax

; 120  : 		Win32ResizeDIBSection(Width, Height);

  000a3	8b 54 24 34	 mov	 edx, DWORD PTR Height$1[rsp]
  000a7	8b 4c 24 38	 mov	 ecx, DWORD PTR Width$2[rsp]
  000ab	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXHH@Z ; Win32ResizeDIBSection

; 121  : 		OutputDebugStringA("WM_SIZE\n");

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89927
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 122  : 	}
; 123  : 	break;

  000bd	e9 1f 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 124  : 
; 125  : 	case WM_DESTROY:
; 126  : 	{
; 127  : 		//handle as error, recreate window
; 128  : 		Running = false;

  000c2	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 129  : 		OutputDebugStringA("WM_DESTROY\n");

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89929
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 130  : 	}
; 131  : 	break;

  000d6	e9 06 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 132  : 
; 133  : 	case WM_CLOSE:
; 134  : 	{
; 135  : 		//todo: handle with message to user
; 136  : 		Running = false;

  000db	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 137  : 		OutputDebugStringA("WM_CLOSE\n");

  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89931
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 138  : 	}
; 139  : 	break;

  000ef	e9 ed 00 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 140  : 
; 141  : 	case WM_ACTIVATEAPP:
; 142  : 	{
; 143  : 		OutputDebugStringA("WM_ACTIVATEAPP\n");

  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG89933
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 144  : 	}
; 145  : 	break;

  00101	e9 db 00 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 146  : 
; 147  : 	case WM_PAINT:
; 148  : 	{
; 149  : 		/* 
; 150  : 			PAINTSTRUCT Paint;
; 151  : 			HDC DeviceContext= BeginPaint(Window, &Paint);
; 152  : 			
; 153  : 			int X =Paint.rcPaint.left;
; 154  : 			int Y= Paint.rcPaint.top;
; 155  : 			int Width = Paint.rcPaint.right - Paint.rcPaint.left;
; 156  : 			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;
; 157  : 
; 158  : 			RECT ClientRect;
; 159  : 			GetClientRect(Window,&ClientRect);
; 160  : 
; 161  : 			Win32UpdateWindow(DeviceContext,&ClientRect ,X,Y,Width,Height);
; 162  : 			PatBlt(DeviceContext, X, Y, Width, Height,BLACKNESS);
; 163  : 			EndPaint(Window,&Paint);
; 164  : 			*/
; 165  : 
; 166  : 		PAINTSTRUCT Paint;
; 167  : 		HDC DeviceContext = BeginPaint(Window, &Paint);

  00106	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  0010e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint
  0011c	48 89 44 24 58	 mov	 QWORD PTR DeviceContext$7[rsp], rax

; 168  : 		int X = Paint.rcPaint.left;

  00121	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  00128	89 44 24 48	 mov	 DWORD PTR X$6[rsp], eax

; 169  : 		int Y = Paint.rcPaint.top;

  0012c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00133	89 44 24 44	 mov	 DWORD PTR Y$5[rsp], eax

; 170  : 		int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00137	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+12]
  0013e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+20]
  00145	2b c8		 sub	 ecx, eax
  00147	8b c1		 mov	 eax, ecx
  00149	89 44 24 40	 mov	 DWORD PTR Width$4[rsp], eax

; 171  : 		int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0014d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Paint$10[rsp+16]
  00154	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR Paint$10[rsp+24]
  0015b	2b c8		 sub	 ecx, eax
  0015d	8b c1		 mov	 eax, ecx
  0015f	89 44 24 3c	 mov	 DWORD PTR Height$3[rsp], eax

; 172  : 		RECT ClientRect;
; 173  : 		GetClientRect(Window, &ClientRect);

  00163	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  00168	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 174  : 		Win32UpdateWindow(DeviceContext, &ClientRect, X, Y, Width, Height);

  00176	8b 44 24 3c	 mov	 eax, DWORD PTR Height$3[rsp]
  0017a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0017e	8b 44 24 40	 mov	 eax, DWORD PTR Width$4[rsp]
  00182	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00186	44 8b 4c 24 44	 mov	 r9d, DWORD PTR Y$5[rsp]
  0018b	44 8b 44 24 48	 mov	 r8d, DWORD PTR X$6[rsp]
  00190	48 8d 54 24 70	 lea	 rdx, QWORD PTR ClientRect$9[rsp]
  00195	48 8b 4c 24 58	 mov	 rcx, QWORD PTR DeviceContext$7[rsp]
  0019a	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ; Win32UpdateWindow

; 175  : 		EndPaint(Window, &Paint);

  0019f	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR Paint$10[rsp]
  001a7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 176  : 	}
; 177  : 	break;

  001b5	eb 2a		 jmp	 SHORT $LN2@Win32MainW
$LN9@Win32MainW:

; 178  : 
; 179  : 	default:
; 180  : 	{
; 181  : 
; 182  : 		//OutputDebugStringA("DEFAULT\n");
; 183  : 		Result = DefWindowProc(Window, Message, WParam, LParam);

  001b7	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR LParam$[rsp]
  001bf	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR WParam$[rsp]
  001c7	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR Message$[rsp]
  001ce	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR Window$[rsp]
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
  001dc	48 89 44 24 50	 mov	 QWORD PTR Result$[rsp], rax
$LN2@Win32MainW:

; 184  : 	}
; 185  : 	break;
; 186  : 	}
; 187  : 	return (Result);

  001e1	48 8b 44 24 50	 mov	 rax, QWORD PTR Result$[rsp]

; 188  : }

  001e6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ee	48 33 cc	 xor	 rcx, rsp
  001f1	e8 00 00 00 00	 call	 __security_check_cookie
  001f6	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001fd	c3		 ret	 0
?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
WindowHeight$ = 112
WindowWidth$ = 116
DeviceContext$ = 144
WindowRect$ = 152
x$ = 160
y$ = 168
Width$ = 176
Height$ = 184
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z PROC ; Win32UpdateWindow

; 92   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 93   : 	int WindowWidth = WindowRect->right - WindowRect->left;

  0001b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR WindowRect$[rsp]
  00023	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR WindowRect$[rsp]
  0002b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	2b c1		 sub	 eax, ecx
  00032	89 44 24 74	 mov	 DWORD PTR WindowWidth$[rsp], eax

; 94   : 	int WindowHeight = WindowRect->bottom - WindowRect->top;

  00036	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR WindowRect$[rsp]
  0003e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR WindowRect$[rsp]
  00046	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00049	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0004c	2b c1		 sub	 eax, ecx
  0004e	89 44 24 70	 mov	 DWORD PTR WindowHeight$[rsp], eax

; 95   : 
; 96   : 	StretchDIBits(DeviceContext,

  00052	c7 44 24 60 20
	00 cc 00	 mov	 DWORD PTR [rsp+96], 13369376 ; 00cc0020H
  0005a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR [rsp+88], 0
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?BitmapInfo@@3UtagBITMAPINFO@@A
  00069	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  00075	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0007a	8b 44 24 70	 mov	 eax, DWORD PTR WindowHeight$[rsp]
  0007e	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00082	8b 44 24 74	 mov	 eax, DWORD PTR WindowWidth$[rsp]
  00086	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0008a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00092	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0009a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  000a0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a4	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR ?BitmapWidth@@3HA
  000ab	45 33 c0	 xor	 r8d, r8d
  000ae	33 d2		 xor	 edx, edx
  000b0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR DeviceContext$[rsp]
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StretchDIBits

; 97   : 				  0, 0, BitmapWidth, BitmapHeight,
; 98   : 				  0, 0, WindowWidth, WindowHeight,
; 99   : 				  BitmapMemory,
; 100  : 				  &BitmapInfo,
; 101  : 				  DIB_RGB_COLORS, SRCCOPY);
; 102  : }

  000be	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000c5	c3		 ret	 0
?Win32UpdateWindow@@YAXPEAUHDC__@@PEAUtagRECT@@HHHH@Z ENDP ; Win32UpdateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
Pixel$1 = 32
Y$2 = 40
X$3 = 44
BytesPerPixel$ = 48
BitmapMemorySize$ = 52
Pitch$ = 56
Row$ = 64
BitmapInfo$ = 72
__$ArrayPad$ = 120
Width$ = 144
Height$ = 152
?Win32ResizeDIBSection@@YAXHH@Z PROC			; Win32ResizeDIBSection

; 31   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 32   : 	if (BitmapMemory)

  0001e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?BitmapMemory@@3PEAXEA, 0
  00026	74 15		 je	 SHORT $LN8@Win32Resiz

; 33   : 	{
; 34   : 		VirtualFree(BitmapMemory, 0, MEM_RELEASE);

  00028	41 b8 00 80 00
	00		 mov	 r8d, 32768		; 00008000H
  0002e	33 d2		 xor	 edx, edx
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?BitmapMemory@@3PEAXEA
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree
$LN8@Win32Resiz:

; 35   : 	}
; 36   : 
; 37   : 	BitmapWidth = Width;

  0003d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Width$[rsp]
  00044	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapWidth@@3HA, eax

; 38   : 	BitmapHeight = Height;

  0004a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR Height$[rsp]
  00051	89 05 00 00 00
	00		 mov	 DWORD PTR ?BitmapHeight@@3HA, eax

; 39   : 	BITMAPINFO BitmapInfo;
; 40   : 	BitmapInfo.bmiHeader.biSize = sizeof(BitmapInfo.bmiHeader);

  00057	c7 44 24 48 28
	00 00 00	 mov	 DWORD PTR BitmapInfo$[rsp], 40 ; 00000028H

; 41   : 	BitmapInfo.bmiHeader.biWidth = BitmapWidth;

  0005f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00065	89 44 24 4c	 mov	 DWORD PTR BitmapInfo$[rsp+4], eax

; 42   : 	BitmapInfo.bmiHeader.biHeight = -BitmapHeight; // negative top yield a 'top down'

  00069	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0006f	f7 d8		 neg	 eax
  00071	89 44 24 50	 mov	 DWORD PTR BitmapInfo$[rsp+8], eax

; 43   : 	BitmapInfo.bmiHeader.biPlanes = 1;

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	66 89 44 24 54	 mov	 WORD PTR BitmapInfo$[rsp+12], ax

; 44   : 	BitmapInfo.bmiHeader.biBitCount = 32;

  0007f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00084	66 89 44 24 56	 mov	 WORD PTR BitmapInfo$[rsp+14], ax

; 45   : 	BitmapInfo.bmiHeader.biCompression = BI_RGB;

  00089	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR BitmapInfo$[rsp+16], 0

; 46   : 
; 47   : 	int BytesPerPixel = 4;

  00091	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR BytesPerPixel$[rsp], 4

; 48   : 	int BitmapMemorySize = (BitmapWidth * BitmapHeight) * BytesPerPixel;

  00099	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  0009f	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BitmapHeight@@3HA
  000a6	0f af 44 24 30	 imul	 eax, DWORD PTR BytesPerPixel$[rsp]
  000ab	89 44 24 34	 mov	 DWORD PTR BitmapMemorySize$[rsp], eax

; 49   : 
; 50   : 	BitmapMemory = VirtualAlloc(

  000af	48 63 44 24 34	 movsxd	 rax, DWORD PTR BitmapMemorySize$[rsp]
  000b4	41 b9 04 00 00
	00		 mov	 r9d, 4
  000ba	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  000c0	48 8b d0	 mov	 rdx, rax
  000c3	33 c9		 xor	 ecx, ecx
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000cb	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?BitmapMemory@@3PEAXEA, rax

; 51   : 		0,				  //address 0 = we don't care yet
; 52   : 		BitmapMemorySize, //size in bytes
; 53   : 		MEM_COMMIT,		  // vs MEM_RESERVE
; 54   : 		PAGE_READWRITE	// access mode
; 55   : 	);
; 56   : 
; 57   : 	// actually draw pixels!
; 58   : 	int Pitch = Width * BytesPerPixel;  // Pitch is the difference between rows of pixels in Bytes

  000d2	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR Width$[rsp]
  000d9	0f af 44 24 30	 imul	 eax, DWORD PTR BytesPerPixel$[rsp]
  000de	89 44 24 38	 mov	 DWORD PTR Pitch$[rsp], eax

; 59   : 	uint8 *Row = (uint8 *)BitmapMemory; // cast the void pointer BitmapMemory to unsigned 8 bit int

  000e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?BitmapMemory@@3PEAXEA
  000e9	48 89 44 24 40	 mov	 QWORD PTR Row$[rsp], rax

; 60   : 	for (int Y = 0; Y < BitmapHeight; ++Y)

  000ee	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR Y$2[rsp], 0
  000f6	eb 0a		 jmp	 SHORT $LN4@Win32Resiz
$LN2@Win32Resiz:
  000f8	8b 44 24 28	 mov	 eax, DWORD PTR Y$2[rsp]
  000fc	ff c0		 inc	 eax
  000fe	89 44 24 28	 mov	 DWORD PTR Y$2[rsp], eax
$LN4@Win32Resiz:
  00102	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  00108	39 44 24 28	 cmp	 DWORD PTR Y$2[rsp], eax
  0010c	0f 8d 9a 00 00
	00		 jge	 $LN3@Win32Resiz

; 61   : 	{
; 62   : 		//uint32 *Pixel = (uint32 *)Row; //pointer to first pixel of Row
; 63   : 		uint8 *Pixel = (uint8 *)Row; //pointer to first byte of first pixel of Row

  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR Row$[rsp]
  00117	48 89 44 24 20	 mov	 QWORD PTR Pixel$1[rsp], rax

; 64   : 
; 65   : 		for (int X = 0; X < BitmapWidth; ++X)

  0011c	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR X$3[rsp], 0
  00124	eb 0a		 jmp	 SHORT $LN7@Win32Resiz
$LN5@Win32Resiz:
  00126	8b 44 24 2c	 mov	 eax, DWORD PTR X$3[rsp]
  0012a	ff c0		 inc	 eax
  0012c	89 44 24 2c	 mov	 DWORD PTR X$3[rsp], eax
$LN7@Win32Resiz:
  00130	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00136	39 44 24 2c	 cmp	 DWORD PTR X$3[rsp], eax
  0013a	7d 56		 jge	 SHORT $LN6@Win32Resiz

; 66   : 		{
; 67   : 			/*
; 68   : 				32 Pixel in memory :
; 69   : 				RR GG BB AA (?) (as 1 byte Hex numbers)
; 70   : 		 	*/
; 71   : 
; 72   : 			//https://www.youtube.com/watch?v=hNKU8Jiza2g&feature=youtu.be&t=1896
; 73   : 			// WHY NO WORK???
; 74   : 			*Pixel = 255;

  0013c	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00141	c6 00 ff	 mov	 BYTE PTR [rax], 255	; 000000ffH

; 75   : 			++Pixel;

  00144	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00149	48 ff c0	 inc	 rax
  0014c	48 89 44 24 20	 mov	 QWORD PTR Pixel$1[rsp], rax

; 76   : 
; 77   : 			*Pixel = 0;

  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00156	c6 00 00	 mov	 BYTE PTR [rax], 0

; 78   : 			++Pixel;

  00159	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  0015e	48 ff c0	 inc	 rax
  00161	48 89 44 24 20	 mov	 QWORD PTR Pixel$1[rsp], rax

; 79   : 
; 80   : 			*Pixel = 0;

  00166	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  0016b	c6 00 00	 mov	 BYTE PTR [rax], 0

; 81   : 			++Pixel;

  0016e	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00173	48 ff c0	 inc	 rax
  00176	48 89 44 24 20	 mov	 QWORD PTR Pixel$1[rsp], rax

; 82   : 
; 83   : 			*Pixel = 0;

  0017b	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00180	c6 00 00	 mov	 BYTE PTR [rax], 0

; 84   : 			++Pixel;

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR Pixel$1[rsp]
  00188	48 ff c0	 inc	 rax
  0018b	48 89 44 24 20	 mov	 QWORD PTR Pixel$1[rsp], rax

; 85   : 		}

  00190	eb 94		 jmp	 SHORT $LN5@Win32Resiz
$LN6@Win32Resiz:

; 86   : 
; 87   : 		Row += Pitch;

  00192	48 63 44 24 38	 movsxd	 rax, DWORD PTR Pitch$[rsp]
  00197	48 8b 4c 24 40	 mov	 rcx, QWORD PTR Row$[rsp]
  0019c	48 03 c8	 add	 rcx, rax
  0019f	48 8b c1	 mov	 rax, rcx
  001a2	48 89 44 24 40	 mov	 QWORD PTR Row$[rsp], rax

; 88   : 	}

  001a7	e9 4c ff ff ff	 jmp	 $LN2@Win32Resiz
$LN3@Win32Resiz:

; 89   : }

  001ac	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b1	48 33 cc	 xor	 rcx, rsp
  001b4	e8 00 00 00 00	 call	 __security_check_cookie
  001b9	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001c0	c3		 ret	 0
?Win32ResizeDIBSection@@YAXHH@Z ENDP			; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp
; File w:\handmade\code\win32_handmade.cpp
_TEXT	SEGMENT
MessageResult$1 = 96
WindowHandle$2 = 104
WindowClass$ = 112
Message$3 = 192
Instance$ = 256
PrevInstance$ = 264
Command$ = 272
ShowCode$ = 280
WinMain	PROC

; 195  : {

$LN11:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H

; 196  : 
; 197  : 	WNDCLASS WindowClass = {}; // declares a WNDCLASS instance 'windowClass', with members initialized to 0.

  0001c	48 8d 44 24 70	 lea	 rax, QWORD PTR WindowClass$[rsp]
  00021	48 8b f8	 mov	 rdi, rax
  00024	33 c0		 xor	 eax, eax
  00026	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  0002b	f3 aa		 rep stosb

; 198  : 
; 199  : 	WindowClass.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW; // bitfield flags to define windowstyle see MSDN

  0002d	c7 44 24 70 23
	00 00 00	 mov	 DWORD PTR WindowClass$[rsp], 35 ; 00000023H

; 200  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;		// pointer to a function that defines window's response to events

  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?Win32MainWindowCallback@@YA_JPEAUHWND__@@I_K_J@Z ; Win32MainWindowCallback
  0003c	48 89 44 24 78	 mov	 QWORD PTR WindowClass$[rsp+8], rax

; 201  : 	// WindowClass.cbClsExtra = ; // if we want to store extra bytes
; 202  : 	// WindowClass.cbWndExtra = ; // if we want to store extra bytes
; 203  : 	WindowClass.hInstance = Instance; // reference to the instance of this window, from WinMain function.(Could also use GetModuleHandle)

  00041	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00049	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+24], rax

; 204  : 	// WindowClass.hIcon = ; // icon for window
; 205  : 	// WindowClass.hCursor = ; // cursor position
; 206  : 	// WindowClass.hbrBackground = ; // background brush
; 207  : 	// WindowClass.lpszMenuName = ; // menu name
; 208  : 	WindowClass.lpszClassName = "handmadeHeroWindowClass";

  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG89952
  00058	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR WindowClass$[rsp+64], rax

; 209  : 
; 210  : 	if (RegisterClass(&WindowClass))

  00060	48 8d 4c 24 70	 lea	 rcx, QWORD PTR WindowClass$[rsp]
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  0006b	0f b7 c0	 movzx	 eax, ax
  0006e	85 c0		 test	 eax, eax
  00070	0f 84 c7 00 00
	00		 je	 $LN4@WinMain

; 211  : 	{
; 212  : 		HWND WindowHandle = CreateWindowEx(

  00076	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  0007f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR Instance$[rsp]
  00087	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0008c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  00095	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  0009e	c7 44 24 38 00
	00 00 80	 mov	 DWORD PTR [rsp+56], -2147483648 ; ffffffff80000000H
  000a6	c7 44 24 30 00
	00 00 80	 mov	 DWORD PTR [rsp+48], -2147483648 ; ffffffff80000000H
  000ae	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  000b6	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  000be	41 b9 00 00 cf
	10		 mov	 r9d, 282001408		; 10cf0000H
  000c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG89955
  000cb	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR WindowClass$[rsp+64]
  000d3	33 c9		 xor	 ecx, ecx
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  000db	48 89 44 24 68	 mov	 QWORD PTR WindowHandle$2[rsp], rax

; 213  : 			0,
; 214  : 			WindowClass.lpszClassName,
; 215  : 			"Handmade Hero",
; 216  : 			WS_OVERLAPPEDWINDOW | WS_VISIBLE,
; 217  : 			CW_USEDEFAULT,
; 218  : 			CW_USEDEFAULT,
; 219  : 			CW_USEDEFAULT,
; 220  : 			CW_USEDEFAULT,
; 221  : 			0,
; 222  : 			0,
; 223  : 			Instance,
; 224  : 			0);
; 225  : 
; 226  : 		if (WindowHandle)

  000e0	48 83 7c 24 68
	00		 cmp	 QWORD PTR WindowHandle$2[rsp], 0
  000e6	74 55		 je	 SHORT $LN6@WinMain

; 227  : 		{
; 228  : 			MSG Message;
; 229  : 			Running = true;

  000e8	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1
$LN2@WinMain:

; 230  : 			while (Running)

  000ef	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA
  000f6	85 c0		 test	 eax, eax
  000f8	74 43		 je	 SHORT $LN3@WinMain

; 231  : 			{
; 232  : 
; 233  : 				BOOL MessageResult = GetMessageA(&Message, 0, 0, 0);

  000fa	45 33 c9	 xor	 r9d, r9d
  000fd	45 33 c0	 xor	 r8d, r8d
  00100	33 d2		 xor	 edx, edx
  00102	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Message$3[rsp]
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetMessageA
  00110	89 44 24 60	 mov	 DWORD PTR MessageResult$1[rsp], eax

; 234  : 
; 235  : 				if (MessageResult > 0)

  00114	83 7c 24 60 00	 cmp	 DWORD PTR MessageResult$1[rsp], 0
  00119	7e 1e		 jle	 SHORT $LN8@WinMain

; 236  : 				{
; 237  : 					TranslateMessage(&Message);

  0011b	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Message$3[rsp]
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 238  : 					DispatchMessageA(&Message);

  00129	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR Message$3[rsp]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 239  : 				}
; 240  : 				else

  00137	eb 02		 jmp	 SHORT $LN9@WinMain
$LN8@WinMain:

; 241  : 				{
; 242  : 					break;

  00139	eb 02		 jmp	 SHORT $LN3@WinMain
$LN9@WinMain:

; 243  : 				}
; 244  : 			}

  0013b	eb b2		 jmp	 SHORT $LN2@WinMain
$LN3@WinMain:
$LN6@WinMain:
$LN4@WinMain:

; 245  : 		}
; 246  : 		else
; 247  : 		{
; 248  : 			//todo: logging
; 249  : 		}
; 250  : 	}
; 251  : 	else
; 252  : 	{
; 253  : 		//todo: logging
; 254  : 	}
; 255  : 
; 256  : 	return (0);

  0013d	33 c0		 xor	 eax, eax

; 257  : }

  0013f	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
